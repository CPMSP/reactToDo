{"version":3,"sources":["ToDo.js","NewToDoForm.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","handleUpdate","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","className","onSubmit","type","onChange","completed","onClick","class","Component","NewToDoForm","handleSubmit","createToDo","uuid","htmlFor","placeholder","ToDoList","todos","create","remove","update","toggleCompletion","newToDo","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed3d291b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Todo.css\";\n\nclass ToDo extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisEditing: false,\n\t\t\ttask: this.props.task\n\t\t};\n\t\tthis.handleRemove = this.handleRemove.bind(this);\n\t\tthis.toggleForm = this.toggleForm.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleUpdate = this.handleUpdate.bind(this);\n\t\tthis.handleToggle = this.handleToggle.bind(this);\n\t}\n\n\thandleRemove() {\n\t\tthis.props.removeTodo(this.props.id);\n\t}\n\n\ttoggleForm() {\n\t\tthis.setState({ isEditing: !this.state.isEditing });\n\t}\n\n\thandleUpdate(evt) {\n\t\tevt.preventDefault();\n\t\tthis.props.updateTodo(this.props.id, this.state.task);\n\t\tthis.setState({ isEditing: false });\n\t}\n\n\thandleChange(evt) {\n\t\tthis.setState({\n\t\t\t[evt.target.name]: evt.target.value\n\t\t});\n\t}\n\n\thandleToggle(evt) {\n\t\tthis.props.toggleTodo(this.props.id);\n\t}\n\n\trender() {\n\t\tlet result;\n\t\tif (this.state.isEditing) {\n\t\t\tresult = (\n\t\t\t\t<div className=\"Todo\">\n\t\t\t\t\t<form\n\t\t\t\t\t\tclassName=\"Todo-edit-form\"\n\t\t\t\t\t\tonSubmit={this.handleUpdate}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={this.state.task}\n\t\t\t\t\t\t\tname=\"task\"\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button>Save</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\tresult = (\n\t\t\t\t<div className=\"Todo\">\n\t\t\t\t\t<li\n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\tthis.props.completed\n\t\t\t\t\t\t\t\t? \"Todo-task completed\"\n\t\t\t\t\t\t\t\t: \"Todo-task\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonClick={this.handleToggle}>\n\t\t\t\t\t\t{this.props.task}\n\t\t\t\t\t</li>\n\t\t\t\t\t<div className=\"Todo-buttons\">\n\t\t\t\t\t\t<button onClick={this.toggleForm}>\n\t\t\t\t\t\t\t<i class=\"fas fa-pen\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button onClick={this.handleRemove}>\n\t\t\t\t\t\t\t<i class=\"fas fa-trash\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport default ToDo;\n","import React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport \"./NewToDoForm.css\";\n\nclass NewToDoForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { task: \"\" };\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(evt) {\n\t\tthis.setState({\n\t\t\t[evt.target.name]: evt.target.value\n\t\t});\n\t}\n\n\thandleSubmit(evt) {\n\t\tevt.preventDefault();\n\t\tthis.props.createToDo({ ...this.state, id: uuid(), completed: false });\n\t\tthis.setState({ task: \"\" });\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<form className=\"NewToDoForm\" onSubmit={this.handleSubmit}>\n\t\t\t\t<label htmlFor=\"task\">Add an Item</label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"task\"\n\t\t\t\t\tplaceholder=\"New ToDo\"\n\t\t\t\t\tid=\"task\"\n\t\t\t\t\tvalue={this.state.task}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<button>Add ToDo</button>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default NewToDoForm;\n","import React, { Component } from \"react\";\nimport ToDo from \"./ToDo\";\nimport NewToDoForm from \"./NewToDoForm\";\nimport \"./TodoList.css\";\n\nclass ToDoList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttodos: []\n\t\t};\n\t\tthis.create = this.create.bind(this);\n\t\tthis.remove = this.remove.bind(this);\n\t\tthis.update = this.update.bind(this);\n\t\tthis.toggleCompletion = this.toggleCompletion.bind(this);\n\t}\n\n\tcreate(newToDo) {\n\t\tthis.setState({\n\t\t\ttodos: [...this.state.todos, newToDo]\n\t\t});\n\t}\n\n\tremove(id) {\n\t\tthis.setState({\n\t\t\ttodos: this.state.todos.filter(t => t.id !== id)\n\t\t});\n\t}\n\n\tupdate(id, updatedTask) {\n\t\tconst updatedTodos = this.state.todos.map(todo => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, task: updatedTask };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({ todos: updatedTodos });\n\t}\n\n\ttoggleCompletion(id) {\n\t\tconst updatedTodos = this.state.todos.map(todo => {\n\t\t\tif (todo.id === id) {\n\t\t\t\treturn { ...todo, completed: !todo.completed };\n\t\t\t}\n\t\t\treturn todo;\n\t\t});\n\t\tthis.setState({ todos: updatedTodos });\n\t}\n\n\trender() {\n\t\tconst todos = this.state.todos.map(todo => {\n\t\t\treturn (\n\t\t\t\t<ToDo\n\t\t\t\t\tkey={todo.id}\n\t\t\t\t\tid={todo.id}\n\t\t\t\t\ttask={todo.task}\n\t\t\t\t\tcompleted={todo.completed}\n\t\t\t\t\tremoveTodo={this.remove}\n\t\t\t\t\tupdateTodo={this.update}\n\t\t\t\t\ttoggleTodo={this.toggleCompletion}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"TodoList\">\n\t\t\t\t<h1>\n\t\t\t\t\tToDo List <span>A Simple React Todo List App</span>\n\t\t\t\t</h1>\n\t\t\t\t<ul>{todos}</ul>\n\t\t\t\t<NewToDoForm createToDo={this.create} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ToDoList;\n","import React from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport \"./App.css\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ToDoList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}